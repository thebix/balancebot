import { Parser } from 'expr-eval'
import { Readable } from 'stream'
import _config from '../config'
import { store, history } from '../server'
import {
    balanceInit, balanceChange, jsonSave, botCmd,
    setBotBalanceMessageId
} from '../actions'
import _commands from '../enums/commands'
import FileSystem from '../lib/filesystem'
import lib from '../lib/index'

import { l, log, logLevel, getDateString } from '../logger'

import fs from 'fs'
import json2csv from 'json2csv'

export default class Balance {
    constructor() {
        this._mapGroupsToButtons = this._mapGroupsToButtons.bind(this)
        this._sendBalance = this._sendBalance.bind(this)
        this._getUsersSumsByPeriod = this._getUsersSumsByPeriod.bind(this)
    }

    initIfNeed(message, bot) {
        const balance = store.getState().balance[message.chat.id]
        if (balance === undefined || balance === null || balance === '') {
            this.init(message, bot)
        }
    }
    init(message, bot) {
        const period = new Date().getMonth()
        store.dispatch(balanceInit(message.chat.id, period))
        this.balance(message, bot)

    }
    balance(message, bot) {
        const balance = store.getState().balance[message.chat.id]
        let res = ``
        if (balance === undefined || balance === null || balance === '') {
            store.dispatch(balanceInit(message.chat.id, period))
            res = store.getState().balanceInit[message.chat.id]
        }
        const period = new Date().getMonth()
        if (period != balance.period) {
            store.dispatch(balanceInit(message.chat.id, period))
            res = store.getState().balanceInit[message.chat.id]
        }
        res = balance.balance
        bot.sendMessage(message.chat.id, `–û—Å—Ç–∞—Ç–æ–∫ ${res} ü§ñ`)
        this.stats(message, bot)
        return res

    }
    change(message, bot) {
        let { text } = message
        store.dispatch(botCmd(message.chat.id, _commands.BALANCE_CHANGE))

        const parser = new Parser()
        try {
            text = parser.parse(text).evaluate()
        } catch (ex) {
            bot.sendMessage(message.chat.id, `–ù–µ –ø–æ–Ω—è–ª –≤—ã—Ä–∞–∂–µ–Ω–∏–µ ü§ñ`)
            return
        }

        const period = new Date().getMonth()
        let balance = store.getState().balance[message.chat.id]
        if (balance && balance.period != period)
            store.dispatch(balanceInit(message.chat.id, period))
        store.dispatch(balanceChange(message.chat.id, period, text))
        const newState = store.getState() //TODO: —Ç–∞–∫ –Ω–µ—Ö–æ—Ä–æ—à–æ, –Ω–∞–¥–æ –≤—ã—Å—á–∏—Ç—ã–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å
        balance = newState.balance[message.chat.id].balance
        store.dispatch(jsonSave(_config.fileState, newState))

        // 
        const groups = newState.paymentGroups[message.chat.id]
        if (!groups || groups.length == 0) { //–¥–ª—è —á–∞—Ç–∞ –Ω–µ –∑–∞–¥–∞–Ω—ã –≥—Ä—É–ø–ø—ã
            return this._sendBalance(message, bot, balance)
        }

        // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        const date = new Date()
        const historyItem = {
            'id': message.id,
            'date_create': date,
            'date_edit': date,
            'date_delete': null,
            'category': 'uncat',
            'value': text,
            'user_id': message.from,
            'comment': ''
        }
        let success = `–ó–∞–ø–∏—Å–∞–ª ${text}`
        bot.sendMessage(message.chat.id, `${success} ü§ñ`)
            .then(x => {
                const cols = 3 // –∫–æ–ª-–≤–æ –≤ –±–ª–æ–∫–µ
                let buttons = [] //—Ä–µ–∑—É–ª—å—Ç–∞—Ç
                const blocksCount = parseInt(groups.length / cols)
                    + ((groups.length % cols) > 0 ? 1 : 0)
                for (let i = 0; i < blocksCount; i++) {
                    buttons.push(
                        groups.slice(i * cols, i * cols + cols)
                            .map(group => this._mapGroupsToButtons(x.message_id, group))
                    )
                }
                bot.editMessageText(`${success}. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ü§ñ`, {
                    message_id: x.message_id,
                    chat_id: message.chat.id,
                    reply_markup: JSON.stringify({
                        inline_keyboard: [[{
                            text: "–£–¥–∞–ª–∏—Ç—å",
                            callback_data: JSON.stringify({
                                hId: x.message_id,
                                cmd: _commands.BALANCE_REMOVE
                            })
                        }], ...buttons
                        ]
                    })
                })
                historyItem.id = x.message_id
                history.create(historyItem, message.chat.id)
                    .then(x => { })
                    .catch(ex => log(ex, logLevel.ERROR))
                return this._sendBalance(message, bot, balance)
            }).catch(ex => {
                log(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É. –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ —Å id —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞–ª–µ—è = ${historyItem.id}. err = ${ex}.`)
                history.create(historyItem, message.chat.id)
                return this._sendBalance(message, bot, balance)
            })
    }
    categoryChange(message, bot, data) {
        store.dispatch(botCmd(message.chat.id, _commands.BALANCE_CATEGORY_CHANGE))

        //—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const { hId, gId } = data
        return history.getById(hId, message.chat.id)
            .then(item => {
                if (!item) {
                    bot.sendMessage(message.chat.id, `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ ü§ñ`)
                    return Promise.reject(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ ü§ñ`)
                }
                const groups = store.getState().paymentGroups[message.chat.id] || []
                let oldCategory = ``
                if (item.category && item.category != 'uncat')
                    oldCategory = `${item.category} -> `
                item.category = groups.filter(x => gId == x.id)[0].title
                const comment = item.comment ? `, ${item.comment}` : ``
                return history.setById(hId, item, message.chat.id)
                    .then(data => {
                        return bot.editMessageText(`${item.value}, ${oldCategory}${item.category}${comment} ü§ñ`, {
                            message_id: hId,
                            chat_id: message.chat.id,
                            reply_markup: JSON.stringify({
                                inline_keyboard: [[{
                                    text: "–£–¥–∞–ª–∏—Ç—å",
                                    callback_data: JSON.stringify({
                                        hId: hId,
                                        cmd: _commands.BALANCE_REMOVE
                                    })
                                }]]
                            })
                        })
                    })
                    .catch(ex => log(ex, logLevel.ERROR))
            }).catch(ex => log(ex, logLevel.ERROR))
    }
    commentChange(message, bot) {
        store.dispatch(botCmd(message.chat.id, _commands.BALANCE_COMMENT_CHANGE))

        // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
        return history.getAll(message.chat.id)
            .then(all => {
                if (!all || all.constructor !== Array)
                    all = []
                let article = all.sort((i1, i2) => i2.id - i1.id)
                if (!article || article.length == 0) {
                    return bot.sendMessage(message.chat.id, `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ ü§ñ`)
                }
                article = article[0]
                article.comment = message.text

                return history.setById(article.id, article, message.chat.id)
                    .then(data => {
                        bot.editMessageText(`${article.value}, ${article.category}, ${article.comment} ü§ñ`, {
                            message_id: article.id,
                            chat_id: message.chat.id,
                            reply_markup: JSON.stringify({
                                inline_keyboard: [[{
                                    text: "–£–¥–∞–ª–∏—Ç—å",
                                    callback_data: JSON.stringify({
                                        hId: article.id,
                                        cmd: _commands.BALANCE_REMOVE
                                    })
                                }]]
                            })
                        }).then((data) => {
                            const balance = store.getState().balance[message.chat.id].balance //TODO: –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–∞–ª–∞–Ω—Å —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                            return this._sendBalance(message, bot, balance)
                        }).catch(ex => log(ex, logLevel.ERROR))
                    })
            }).catch(ex => log(ex, logLevel.ERROR))
    }
    delete(message, bot, data) {
        // —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        const { hId, gId } = data
        let success = ''
        let newBalance = undefined
        return history.getById(hId, message.chat.id)
            .then(item => {
                if (!item) {
                    bot.sendMessage(message.chat.id, `–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ ü§ñ`)
                    return Promise.reject(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ ü§ñ`)
                }
                if (item.date_delete) {
                    // bot.sendMessage(message.chat.id, `–ó–∞–ø–∏—Å—å —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ ü§ñ`)
                    return Promise.resolve()
                }
                store.dispatch(botCmd(message.chat.id, _commands.BALANCE_REMOVE))
                item.date_delete = new Date()
                const balance = store.getState().balance[message.chat.id] || {}
                if (balance.period != item.date_delete.getMonth()) {
                    success = `${item.value} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏. –û—Å—Ç–∞—Ç–æ–∫ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è ü§ñ`
                } else {
                    store.dispatch(balanceChange(message.chat.id,
                        new Date(item.date_create).getMonth(),
                        -item.value))
                    newBalance = parseInt(balance.balance) + parseInt(item.value)
                    success = `${item.value}, ${item.category}, ${item.comment} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ ü§ñ`
                }
                return history.setById(hId, item, message.chat.id)
            })
            .then(item => {
                if (newBalance !== undefined)
                    this._sendBalance(message, bot, newBalance, false)
                return bot.editMessageText(`${success}`, {
                    message_id: hId,
                    chat_id: message.chat.id
                })
            })
            .catch(ex => log(ex, logLevel.ERROR))
    }
    _mapGroupsToButtons(id, group, replyId) {
        return {
            text: group.title,
            callback_data: JSON.stringify({
                gId: group.id,
                hId: id,
                rId: replyId,
                cmd: _commands.BALANCE_CATEGORY_CHANGE
            })
        }
    }
    _sendBalance = (message, bot, balance, isNewMessage = true) => {
        const messageId = store.getState().botBalanceMessageId[message.chat.id]
        if (!messageId || isNewMessage) {
            return bot.sendMessage(message.chat.id, `–û—Å—Ç–∞—Ç–æ–∫ ${balance} ü§ñ`)
                .then(x => {
                    store.dispatch(setBotBalanceMessageId(message.chat.id, x.message_id))
                })
        }
        else
            return bot.editMessageText(`–û—Å—Ç–∞—Ç–æ–∫ ${balance} ü§ñ`, {
                message_id: messageId,
                chat_id: message.chat.id,
            })
    }

    report(message, bot) {
        let file
        return history.getAll(message.chat.id)
            .then(all => {
                // if (!all || all.constructor !== Array)
                //     all = []

                all = all.filter(x => !x.date_delete).sort((a, b) => b.id - a.id)

                const { users } = store.getState()
                var fields = [{
                    label: '–î–∞—Ç–∞', // Supports duplicate labels (required, else your column will be labeled [function]) 
                    value: function (row, field, data) {
                        return getDateString(new Date(row.date_create))
                    },
                    default: 'NULL' // default if value function returns null or undefined 
                }, 'value', 'category', 'comment', {
                    label: '–Æ–∑–µ—Ä', // Supports duplicate labels (required, else your column will be labeled [function]) 
                    value: function (row, field, data) {
                        return `${users[row.user_id].firstName} ${users[row.user_id].lastName}`
                    },
                    default: 'NULL' // default if value √éfunction returns null or undefined 
                }, 'id'];
                const fieldNames = ['–î–∞—Ç–∞', '–°—É–º–º–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–Æ–∑–µ—Ä', 'id']
                var csv = json2csv({ data: all, fields, fieldNames });
                if (FileSystem.isDirExists(_config.dirStorage, true)
                    && FileSystem.isDirExists(`${_config.dirStorage}repo`, true)) {
                    file = `repo-${message.chat.title}.csv` //TODO: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ, –∏–ª–∏ –¥–∞–∂–µ –¥–ª—è —é–∑–µ—Ä–∞

                    return FileSystem.saveFile(`${_config.dirStorage}repo/${file}`, csv)
                }
                return bot.sendMessage(message.chat.id, `–ù–µ—Ç —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ ü§ñ`)
            })
            .then((data) => {
                return bot.sendDocument(message.chat.id, `${_config.dirStorage}repo/${file}`)
            })
            .then((data) => {
                const balance = store.getState().balance[message.chat.id].balance //TODO: –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–∞–ª–∞–Ω—Å —ç—Ç–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                return this._sendBalance(message, bot, balance)
            })
            .catch(ex => log(ex, logLevel.ERROR))
    }

    stats(message, bot) {
        //TODO: –ø–æ–ª—É—á–∏—Ç—å –∏–∑ message { dateStart = null, dateEnd = null, userId = null, }
        const dateEnd = new Date()
        const dateEndTime = dateEnd.getTime()
        const dateStart = lib.time.getChangedDateTime({ days: -1 })
        const dateStartTime = dateStart.getTime()

        const userId = null //84677480
        return history.getAll(message.chat.id)
            // .then(all => { 
            //     return Promise.resolve(all
            //         .filter(item => !dateStartTime || new Date(item.date_create).getTime() > dateStartTime)
            //         .filter(item => !dateEndTime || new Date(item.date_create).getTime() < dateEndTime)
            //         .filter(item => !userId || item.user_id == userId))
            // })
            .then(all => { //
                const { users } = store.getState()

                //TODO: —Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –∑–∞ –ø–µ—Ä–∏–æ–¥ / –≤ —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –ø—Ä–æ—à–ª—ã–µ
                let sumsText = `–¢—Ä–∞—Ç –ø–æ –ª—é–¥—è–º (–≤ —ç—Ç–æ–º –ø–µ—Ä–∏–æ–¥–µ | —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞'):`
                const usersSumsByCurrent = this._getUsersSumsByPeriod(all, dateStart, dateEnd)
                if (!all || all.length == 0)
                    return bot.sendMessage(message.chat.id, `–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏. –û—Å—Ç–∞—Ç–æ–∫ ${balance} ü§ñ`)

                //–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ
                // TODO: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–µ—Ç—Ä–≤–∞–ª–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                const periods = [] //TODO: —Å–¥–µ–ª—Ç—å —ç—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º
                const dateFirst = new Date(all[all.length - 1].date_create)
                const dateFirstTime = dateFirst.getTime()
                const curTicks = dateEndTime - dateStartTime
                let curDateEnd = lib.time.getChangedDateTime({ ticks: -1 }, dateStart)
                let curDateStart = lib.time.getChangedDateTime({ ticks: -curTicks }, curDateEnd)
                while (curDateEnd.getTime() >= dateFirstTime) {
                    periods.push({
                        start: curDateStart,
                        end: curDateEnd
                    })
                    curDateEnd = lib.time.getChangedDateTime({ ticks: -1 }, curDateStart)
                    curDateStart = lib.time.getChangedDateTime({ ticks: -curTicks }, curDateEnd)
                }

                const usersSumsBeforeCurrent = {}
                periods.forEach(period => {
                    const curUsrSums = this._getUsersSumsByPeriod(all, period.start, period.end)
                    const allKeys = Object.keys(usersSumsBeforeCurrent)
                    Object.keys(curUsrSums).forEach(key => {
                        if (allKeys.indexOf(key) != -1)
                            usersSumsBeforeCurrent[key] = usersSumsBeforeCurrent[key] + curUsrSums[key]
                        else
                            usersSumsBeforeCurrent[key] = curUsrSums[key]
                    })
                })
                l('usersSumsBeforeCurrent', usersSumsBeforeCurrent)
                //TODO: usersSumsBeforeCurrent / periods.length //TODO: —É—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –ø–æ–ª–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–ø–µ—Ä–≤—ã–π)

                Object.keys(usersSumsByCurrent).forEach(userId => {
                    const userName = `${users[userId].firstName} ${users[userId].lastName}`
                    const sum = usersSumsByCurrent[userId]
                    sumsText = `${sumsText}\r\n${userName}: ${sum}`
                })

                return bot.sendMessage(message.chat.id, `${sumsText} ü§ñ`)
                //TODO: –¢—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º / —Å—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã –∑–∞ %–ø–µ—Ä–∏–æ–¥%
                //TODO: –ø–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º / –≤ —Å—Ä–µ–¥–Ω–µ–º –¥–æ —ç—Ç–æ–≥–æ –∑–∞ %–ø–µ—Ä–∏–æ–¥% / –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è

            })
            .catch(ex => log(ex, logLevel.ERROR))
    }

    //TODO: –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –∏–ª–∏ –∫–ª–∞—Å—Å
    _getUsersSumsByPeriod(all = [], dateStart = new Date(), dateEnd = new Date()) {
        const dateStartTime = dateStart.getTime()
        const dateEndTime = dateEnd.getTime()

        const current = all //filter
            .filter(item => !dateStartTime || new Date(item.date_create).getTime() >= dateStartTime)
            .filter(item => !dateEndTime || new Date(item.date_create).getTime() < dateEndTime)
        const result = {}
        Array.from(new Set( //http://stackoverflow.com/questions/1960473/unique-values-in-an-array
            current.map(item => item.user_id)))
            .forEach(userId => {
                const sum = current
                    .filter(item => item.user_id == userId)
                    .reduce((acc, val) => {
                        return acc + val.value
                    }, 0)
                result[userId] = sum
            })
        return result
    }
}


